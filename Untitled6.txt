static void croak(const char *msg) {
    fprintf(stderr, "%s\n", msg);
    fflush(stderr);
}
static void barf(const char *msg) {
    croak(msg);
    exit(1);

}
void maliciousCode()
{
    printf("Successfully executed malicious code!\n");
}
void inputDataProcessing(){
    char dataBuffer[50];

    printf("Get Input Data Stream:\n");
    gets(dataBuffer);
    printf("Input Data Stream: %s\n", dataBuffer);  
}



int check_authentication(char *password){
    int auth_flag = 0;
    
    strcpy (password_buffer,password);

    if (strcmp(password_buffer, "brillig") == 0)
        auth_flag = 1;
    
    if (strcmp(password_buffer, "outgrabe") == 0)
        auth_flag = 1;
    

    return auth_flag;

}

int bof(){
    char buffer[8];
    FILE *badfile;
    badfile = fopen("badfile", "r");
    fread(buffer, sizeof(char), 1024, badfile);
    return 1;
}


int main(int argc, char *argv[])
{
     FILE *f, *fp;
    void *code;
    int i, l;
    struct stat sbuf;

    if(argc < 2) barf("Binary file must be specified");
    if(stat(argv[1], &sbuf)) barf("failed to stat file");
    f_len = (size_t) sbuf.st_size;
    if(!(code = malloc(f_len))) barf("failed to grab required memory");
    if(!(fp = fopen(argv[1], "rb"))) barf("failed to open file");
    if(fread(code, 1, f_len, fp) != f_len) barf("failed to slurp file");
    if(fclose(fp)) barf("failed to close file");
    f = fopen("./exec_shell_code.c", "w");
    l = m;
    for(i = 0; i < f_len; ++i) {
        if(l >= m) {
            if(i) fprintf(f, "\" \\\n");
            fprintf(f, "\t\"");
            l = 0;
        }
        ++l;
        fprintf(f, "\\x%02x", ((unsigned char *)code)[i]);
    }
    fprintf(f, "\"\n\n");
    fprintf(f,""");
    fclose(f);
    


    if (argc < 2)
    
    {
        exit(0);
    }

    if (check_authentication (argv[1]))

    {
        printf("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n");
        printf("    Access Granted.\n");
        printf("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n");
    }
    else
    {   
        printf("\nAccess Denied. :(\n");
    }
    
    if (argc >100)
    {   
        printf("\nYou found the easter egg!!!\n");
    }

    inputDataProcessing();

    bof();
    printf("Not gonna do it!\n");

    return 0;
}
